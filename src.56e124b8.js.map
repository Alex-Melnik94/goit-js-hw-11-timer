{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","elements","getElements","timerId","refs","daysEl","document","querySelector","hoursEl","minsEl","secsEl","start","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","updateCountdown","pad","value","String","padStart","days","Math","floor","hours","mins","secs","textContent","timer"],"mappings":";;;AA0DA,aA1DA,QAAA,oBAGA,MAAMA,EACNC,aAAY,SAAEC,EAAF,WAAYC,IACfC,KAAAA,SAAW,KAAKC,YAAYH,GAC5BA,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAGtBE,YAAYC,GAQGC,MAPM,CACjBC,OAAQC,SAASC,iBAAiBJ,yBAClCK,QAASF,SAASC,iBAAiBJ,0BACnCM,OAAQH,SAASC,iBAAiBJ,yBAClCO,OAAQJ,SAASC,iBAAiBJ,0BAMrCQ,QACMC,YAAY,KACDC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKhB,WAAaa,EAC9BI,EAAO,KAAKC,kBAAkBF,GAC/BG,KAAAA,gBAAgBF,IAC1B,KAGNG,IAAIC,GACMC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGpCL,kBAAkBD,GAMR,MAAA,CAACO,KALK,KAAKJ,IAAIK,KAAKC,MAAMT,EAAQ,QAK3BU,MAJA,KAAKP,IAAIK,KAAKC,MAAOT,EAAQ,MAAyB,OAI/CW,KAHR,KAAKR,IAAIK,KAAKC,MAAOT,EAAQ,KAAoB,MAGnCY,KAFd,KAAKT,IAAIK,KAAKC,MAAOT,EAAQ,IAAc,OAK5DE,iBAAgB,KAACK,EAAD,MAAOG,EAAP,KAAcC,EAAd,KAAoBC,IAC1B,MAAA,OAACxB,EAAD,QAASG,EAAT,OAAkBC,EAAlB,OAA0BC,GAAU,KAAKT,SAC/CI,EAAOyB,YAAcN,EACrBhB,EAAQsB,YAAcH,EACtBlB,EAAOqB,YAAcF,EACrBlB,EAAOoB,YAAcD,GAKzB,MAAME,EAAQ,IAAIlC,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIc,KAAK,kBAGvBiB,EAAMpB","file":"src.56e124b8.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\nclass CountdownTimer {\nconstructor({ selector, targetDate}){\n    this.elements = this.getElements(selector)\n    this.selector = selector\n    this.targetDate = targetDate\n}\n\ngetElements(timerId) {\n        const refs = {\n    daysEl: document.querySelector(`${timerId} [data-value=\"days\"]`),\n    hoursEl: document.querySelector(`${timerId} [data-value=\"hours\"]`),\n    minsEl: document.querySelector(`${timerId} [data-value=\"mins\"]`),\n    secsEl: document.querySelector(`${timerId} [data-value=\"secs\"]`)\n        }\n        \n        return refs\n}\n\n start() {\n       setInterval(() => {\n            const currentTime = Date.now()\n            const deltaTime = this.targetDate - currentTime \n            const time = this.getTimeComponents(deltaTime)\n            this.updateCountdown(time)\n    }, 1000) \n}\n\n pad(value) { \n    return String(value).padStart(2, '0')\n}\n\n getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return {days, hours, mins, secs}\n}\n\nupdateCountdown({days, hours, mins, secs}) {\n    const {daysEl, hoursEl, minsEl, secsEl} = this.elements\n    daysEl.textContent = days\n    hoursEl.textContent = hours\n    minsEl.textContent = mins\n    secsEl.textContent = secs\n}\n\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2021'),\n});\n\ntimer.start()\n\n"]}